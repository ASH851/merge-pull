Node app deploy 

Step 1 - First Clone the app via VS code to GitHub
	- git clone https://github.com/johnpapa/node-hello.git

Step 2 - Go to directory
	- cd node-hello
	- then, git remote -v (for origin)

Step 3 - Set your GitHub url i.e. repo url that you made
	- git remote set-url origin https://github.com/ASH851/node-app.git
	- then, git add .
	- then, git commit -m "Initial"(It will show 'On branch master')

Step 4  - Set the branch (See the branch by 'git branch')
	- Change the branch  - git branch -M main

Step 5 - git push -u origin main

Congratulations! You have successfully pushed the file in your GitHub repo.

Then,
First, let's set up the VM instance with Node.js:

1.Create VM with needed tags and firewall rules
gcloud compute instances create node-server \
    --zone=us-central1-a \
    --machine-type=e2-micro \
    --tags=http-server,node-app \
    --image-family=debian-11 \
    --image-project=debian-cloud

2.Create firewall rule for Node.js app
gcloud compute firewall-rules create allow-node \
    --direction=INGRESS \
    --priority=1000 \
    --network=default \
    --action=ALLOW \
    --rules=tcp:3000 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=node-app

3. Connect to VM via GCloud CLI SDK Shell
   
   # Connect to VM
     gcloud compute ssh node-server --zone=us-central1-a

   # Install Node.js
     curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
     sudo apt-get install -y nodejs

   # Install PM2
     sudo npm install -g pm2

   # Make PM2 start on boot
     pm2 startup

     sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u
     $USER --hp /home/$USER     

4.  Add these secrets to your GitHub repository
    Go to Settings → Secrets and variables → Actions

    Click on new repo secret
    GCP_SA_KEY: Your service account JSON key
    VM_NAME: Your VM instance name (e.g., node-server)
    ZONE: Your VM zone (e.g., us-central1-a)
    VM_TAG: The tag you used for your VM (e.g., node-app)

5.  Add the workflow:-

    name: Deploy Node App to GCP

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GitHub Actions IP
        id: ip
        run: |
          CURRENT_IP=$(curl -s https://api.ipify.org)
          echo "ACTION_IP=$CURRENT_IP" >> $GITHUB_ENV
          echo "Current IP: $CURRENT_IP"

      - name: Create Temporary Firewall Rule
        run: |
          RULE_NAME="temp-deploy-$(date +%s)"
          echo "RULE_NAME=$RULE_NAME" >> $GITHUB_ENV
          
          gcloud compute firewall-rules create $RULE_NAME \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --action=ALLOW \
            --rules=tcp:22 \
            --source-ranges=${{ env.ACTION_IP }}/32 \
            --target-tags=${{ secrets.VM_TAG }}
          
          # Wait for firewall rule to propagate
          sleep 30

      - name: Deploy to VM Instance
        run: |
          # Create app directory
          gcloud compute ssh ${{ secrets.VM_NAME }} --zone=${{ secrets.ZONE }} \
            --command="mkdir -p ~/node-app"

          # Copy files to the instance
          gcloud compute scp --zone=${{ secrets.ZONE }} --recurse ./* ${{ secrets.VM_NAME }}:~/node-app/

          # Install dependencies and restart app
          gcloud compute ssh ${{ secrets.VM_NAME }} --zone=${{ secrets.ZONE }} \
            --command="cd ~/node-app && \
                      npm install && \
                      pm2 delete node-app || true && \
                      pm2 start index.js --name node-app"

      - name: Remove Temporary Firewall Rule
        if: always()
        run: |
          gcloud compute firewall-rules delete ${{ env.RULE_NAME }} --quiet

Then commit the workflow and watch the actions.
If it is deployed successfully it shows green tick.

Then, access the node-app with: - http://YOUR_VM_IP__IP:3000


